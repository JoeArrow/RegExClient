{"RegEx":"- deployment: Send_Ignore_Email_ITSA\\s*dependsOn: Delay_For_Start","Text":"parameters:\n- name: StopStartServicesAppPools\n  displayName: Stop Start services and App Pools?\n  type: boolean\n  default: true\n\n- name: RunCoreDBBackups\n  displayName: Run Core DB Backups?\n  type: boolean\n  default: true\n\n- name: RunStagingDBBackups\n  displayName: Run Staging DB Backups?\n  type: boolean\n  default: true\n\n- name: RunCopyFiles\n  displayName: Run CopyFiles?\n  type: boolean\n  default: true\n\n- name: RunScripts\n  displayName: Run SQL and Batch scripts?\n  type: boolean\n  default: true\n\n- name: RunStagingServerCoreDBRestores\n  displayName: Run Staging Server Core DB Restore?\n  type: boolean\n  default: false  \n\n- name: RunHealthCheck\n  displayName: Run Health Checks?\n  type: boolean\n  default: true\n\ntrigger: none\n\npr: none\n\nresources:\n  repositories:\n    - repository: templates\n      type: github\n      name: Aflac-SCM/Wynsure-AflacGroup-GAS\n      endpoint: Aflac-SCM\n\n# Set variables for use in CD Pipeline \nvariables:\n- group: DeployUserCredentials\n- group: AzureDevOpsAuthTOKEN\n- group: GitHubAuthTOKEN\n- group: SMTPConfiguration\n- group: WynsureGAS\n\nname: $(ReleaseName)-$(Rev:r)-$(WynsureVersion)\n\nstages:\n- stage: EntryPointStage\n  pool: AflacReleasePool  \n  jobs:\n  - job: EntryPointJob\n  - job: RetainPipeline\n    steps:\n      - pwsh: |\n          $contentType = \"application/json\";\n          $headers = @{ Authorization = \u0027Bearer $(System.AccessToken)\u0027 };\n          $rawRequest = @{ daysValid = 120; definitionId = $(System.DefinitionId); ownerId = \u0027User:$(Build.RequestedForId)\u0027; protectPipeline = $false; runId = $(Build.BuildId) };\n          $request =  $rawRequest | ConvertTo-Json;\n          $request = \"[$request]\";\n          $uri = \"$(System.CollectionUri)$(System.TeamProject)/_apis/build/retention/leases?api-version=6.0-preview.1\";\n          Invoke-RestMethod -uri $uri -method POST -Headers $headers -ContentType $contentType -Body $request;\n\n- stage: DEV_Day2\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/DEV_Day2.yml\n\n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-DEV-Day2\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-DEV-Day2\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Generate_CR_Information\n    dependsOn: Send_Ignore_Email_ITSA\n    environment: WynsureGas-DEV-Day2\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - task: PowerShell@1\n            displayName: \u0027Generate CR Information\u0027\n            inputs:\n              scriptType: \u0027inlineScript\u0027\n              inlineScript: |\n                git clone https://$(GitHubPatUserName):$(GitHubPatPassword)@$(GitHubRepo)\n                pip install requests\n                    \n                $Env:ADO_USER=\"$(ADO_USER)\"\n                $Env:ADO_PAT=\"$(ADO_PAT)\"\n                $Env:ADO_BASE_URL=\"$(ADO_BASE_URL)\"\n                    \n                cd change-record\n                python change-record-yaml-pipeline.py -b $(Build.BuildId) -e $(System.StageName)\n              failOnStandardError: false\n\n  - job: Manual_Intervention_Approve_CR\n    dependsOn: Generate_CR_Information\n    condition: succeeded()\n    pool: server\n    displayName: Manual_Intervention_Approve_CR\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          skumar65@aflac.com\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello,\n          \n          Please create the CR from previous task (Generate CR Info) and wait for CR approval.\n          Once CR is approved then, click the link above that says “View manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps Release Pipeline\n\n  - deployment: Stop_Services_AppPools\n    dependsOn: Manual_Intervention_Approve_CR\n    condition: and (in(dependencies.Manual_Intervention_Approve_CR.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.StopStartServicesAppPools, true) }})\n    environment: WynsureGas-DEV-Day2\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/WynsureGas-StopServices-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: true\n              RestGBFPApplicationPoolNameExists: true\n\n  - deployment: Run_DB_Backups\n    dependsOn: Stop_Services_AppPools\n    condition: and (in(dependencies.Stop_Services_AppPools.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunCoreDBBackups, true) }})\n    environment: WynsureGas-DEV-Day2\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/WynsureGas-DBBackup-Template.yml@templates\n            parameters:\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: ${{ parameters.RunStagingDBBackups }}\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Run_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-DEV-Day2\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-CopyFiles-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: false\n                CopySQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: false\n                CopyTGVwMigrateExists: false\n                CopyConfigExists: true\n\n  - deployment: RunPreScripts\n    dependsOn: CopyFiles\n    condition: and (in(dependencies.CopyFiles.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunScripts, true) }})\n    environment: WynsureGas-DEV-Day2\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-RunScripts-Template.yml@templates\n              parameters:\n                PreReleaseSQLScriptExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: false\n\n  - deployment: RunRealTimeCoreDiffDBBackup\n    dependsOn: RunPreScripts\n    condition: and (in(dependencies.RunPreScripts.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }})\n    environment: WynsureGas-DEV-Day2\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGAS-StagingServer-Core-DBRestore-Template.yml@templates\n              parameters:\n                RealTimeCoreDiffDBBackupExists: true\n                StagingServerCoreDBDiffRestoreExists: false\n\n  - job: Manual_CoreDiffDBBackup_Validation\n    dependsOn: RunRealTimeCoreDiffDBBackup\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_CoreDiffDBBackup_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL RealTime Core Db backup job has been started for $(DatabaseName) on server $(DatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor the job until completed.\n          \n          Once backup task is completed, we still need to monitor the backup SQL job $(SQLCoreBackupJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - job: Manual_StagingCoreDB_FullRestore_Validation\n    dependsOn: Manual_CoreDiffDBBackup_Validation\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_StagingCoreDB_FullRestore_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          Check if SQL Staging Server Core Db full restore job has completed for $(DatabaseName) on server $(StagingDatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor until completed, the full restore SQL job $(SQLFullCoreDBRestoreJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: RunStagingServerCoreDBDiffRestore\n    dependsOn: Manual_StagingCoreDB_FullRestore_Validation\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    environment: WynsureGas-DEV-Day2\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGAS-StagingServer-Core-DBRestore-Template.yml@templates\n              parameters:\n                RealTimeCoreDiffDBBackupExists: false\n                StagingServerCoreDBDiffRestoreExists: true\n\n  - job: Manual_StagingCoreDB_DiffRestore_Validation\n    dependsOn: RunStagingServerCoreDBDiffRestore\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_StagingCoreDB_DiffRestore_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL Staging Server Core Db differential restore job has been started for $(DatabaseName) on server $(StagingDatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor the job until completed.\n          \n          Once this restore task is completed, we still need to monitor the differential restore SQL job $(SQLDiffCoreDBRestoreJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: RunPostScripts\n    dependsOn: Manual_StagingCoreDB_DiffRestore_Validation\n    condition: and (and (in(dependencies.Manual_StagingCoreDB_DiffRestore_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunScripts, true) }}),\n                    ne(dependencies.RunPreScripts.result, \u0027Failed\u0027))\n    environment: WynsureGas-DEV-Day2\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-RunScripts-Template.yml@templates\n              parameters:\n                PreReleaseSQLScriptExists: false\n                EnvConfigDeploymentExists: false\n                ReleaseBatchScriptExists: false\n                PostReleaseSQLScriptExists: true\n\n  - job: Manual_Intervention_Validation\n    dependsOn: RunPostScripts\n    condition: or (eq(dependencies.RunPreScripts.result, \u0027Failed\u0027), eq(dependencies.RunPostScripts.result, \u0027Failed\u0027))\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.StopStartServicesAppPools, true) }})\n    environment: WynsureGas-DEV-Day2\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-StartServices-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: true\n                RestGBFPApplicationPoolNameExists: true\n\n  - deployment: Healthcheck\n    dependsOn: Start_Services\n    condition: and (in(dependencies.Start_Services.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-DEV-Day2\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-HealthCheck-Template.yml@templates\n              parameters:\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Healthcheck\n    condition: in(dependencies.HealthCheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-Day2\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Send_Patching_Succeeded_Notification_To_Users\n    condition: in(dependencies.HealthCheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-Day2\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: DEV\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/DEV.yml\n  \n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-DEV-Day2\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-DEV\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_AppPools\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-DEV\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/WynsureGas-StopServices-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: false\n              RestGBFPApplicationPoolNameExists: true\n\n  - deployment: Run_DB_Backups\n    dependsOn: Stop_Services_AppPools\n    condition: and (in(dependencies.Stop_Services_AppPools.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunCoreDBBackups, true) }})\n    environment: WynsureGas-DEV\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/WynsureGas-DBBackup-Template.yml@templates\n            parameters:\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: ${{ parameters.RunStagingDBBackups }}\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Run_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-DEV\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-CopyFiles-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: false\n                CopySQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: false\n                CopyTGVwMigrateExists: false\n                CopyConfigExists: true\n\n  - deployment: RunPreScripts\n    dependsOn: CopyFiles\n    condition: and (in(dependencies.CopyFiles.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunScripts, true) }})\n    environment: WynsureGas-DEV\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-RunScripts-Template.yml@templates\n              parameters:\n                PreReleaseSQLScriptExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: false\n\n  - deployment: RunRealTimeCoreDiffDBBackup\n    dependsOn: RunPreScripts\n    condition: and (in(dependencies.RunPreScripts.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }})\n    environment: WynsureGas-DEV\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGAS-StagingServer-Core-DBRestore-Template.yml@templates\n              parameters:\n                RealTimeCoreDiffDBBackupExists: true\n                StagingServerCoreDBDiffRestoreExists: false\n\n  - job: Manual_CoreDiffDBBackup_Validation\n    dependsOn: RunRealTimeCoreDiffDBBackup\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_CoreDiffDBBackup_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL RealTime Core Differential Db backup job has been started for $(DatabaseName) on server $(DatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor the job until completed.\n          \n          Once backup task is completed, we still need to monitor the backup SQL job $(SQLCoreBackupJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - job: Manual_StagingCoreDB_FullRestore_Validation\n    dependsOn: Manual_CoreDiffDBBackup_Validation\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_StagingCoreDB_FullRestore_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          Check if SQL Staging Server Core Db full restore job has completed for $(DatabaseName) on server $(StagingDatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor until completed, the full restore SQL job $(SQLFullCoreDBRestoreJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: RunStagingServerCoreDBDiffRestore\n    dependsOn: Manual_StagingCoreDB_FullRestore_Validation\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    environment: WynsureGas-DEV\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGAS-StagingServer-Core-DBRestore-Template.yml@templates\n              parameters:\n                RealTimeCoreDiffDBBackupExists: false\n                StagingServerCoreDBDiffRestoreExists: true\n\n  - job: Manual_StagingCoreDB_DiffRestore_Validation\n    dependsOn: RunStagingServerCoreDBDiffRestore\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_StagingCoreDB_DiffRestore_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL Staging Server Core Db differential restore job has been started for $(DatabaseName) on server $(StagingDatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor the job until completed.\n          \n          Once this restore task is completed, we still need to monitor the differential restore SQL job $(SQLDiffCoreDBRestoreJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: RunPostScripts\n    dependsOn: Manual_StagingCoreDB_DiffRestore_Validation\n    condition: and (and (in(dependencies.Manual_StagingCoreDB_DiffRestore_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunScripts, true) }}),\n                    ne(dependencies.RunPreScripts.result, \u0027Failed\u0027))\n\n    environment: WynsureGas-DEV\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-RunScripts-Template.yml@templates\n              parameters:\n                PreReleaseSQLScriptExists: false\n                EnvConfigDeploymentExists: false\n                ReleaseBatchScriptExists: false\n                PostReleaseSQLScriptExists: true\n\n  - job: Manual_Intervention_Validation\n    dependsOn: RunPostScripts\n    condition: or (eq(dependencies.RunPreScripts.result, \u0027Failed\u0027), eq(dependencies.RunPostScripts.result, \u0027Failed\u0027))\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.StopStartServicesAppPools, true) }})\n    environment: WynsureGas-DEV\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-StartServices-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: false\n                RestGBFPApplicationPoolNameExists: true\n\n  - deployment: Healthcheck\n    dependsOn: Start_Services\n    condition: and (in(dependencies.Start_Services.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-DEV\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-HealthCheck-Template.yml@templates\n              parameters:\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Healthcheck\n    condition: in(dependencies.HealthCheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Healthcheck\n    condition: in(dependencies.HealthCheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: DEV_GoldenCopy\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/DEV_GoldenCopy.yml\n  \n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-DEV-GoldenCopy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-DEV-GoldenCopy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n  \n  - deployment: Stop_Services_DB_Backups\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-DEV-GoldenCopy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/StopServices-DBBackup-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: true\n              RestGBFPApplicationPoolNameExists: false\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: false\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Stop_Services_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n\n\n  - deployment: CopyFiles_RunScripts\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-DEV-GoldenCopy\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/CopyFiles-RunScripts-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: false\n                CopySQLScriptExists: true\n                PreReleaseSQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: true\n                CopyTGVwMigrateExists: true\n                CopyConfigExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: true\n\n\n  - job: Manual_Intervention_Validation\n    dependsOn: CopyFiles_RunScripts\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services_Healthcheck\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-DEV-GoldenCopy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/StartServices-Healthcheck-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: true\n                RestGBFPApplicationPoolNameExists: false\n                HealthCheckExists: false\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-GoldenCopy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-GoldenCopy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: DEV_mExecution\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/DEV_mExecution.yml\n\n  jobs:  \n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-DEV-mExecution\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-DEV-mExecution\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_DB_Backups\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-DEV-mExecution\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/StopServices-DBBackup-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: false\n              RestGBFPApplicationPoolNameExists: false\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: false\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Stop_Services_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles_RunScripts\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-DEV-mExecution\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/CopyFiles-RunScripts-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: true\n                CopySQLScriptExists: true\n                PreReleaseSQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: true\n                CopyTGVwMigrateExists: true\n                CopyConfigExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: true\n\n  - job: Manual_Intervention_Validation\n    dependsOn: CopyFiles_RunScripts\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services_Healthcheck\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-DEV-mExecution\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/StartServices-Healthcheck-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: false\n                RestGBFPApplicationPoolNameExists: false\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-mExecution\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-mExecution\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: DEV_mPipeline\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/DEV_mPipeline.yml\n\n  jobs: \n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-DEV-mPipeline\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-DEV-mPipeline\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_DB_Backups\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-DEV-mPipeline\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/StopServices-DBBackup-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: false\n              RestGBFPApplicationPoolNameExists: false\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: false\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Stop_Services_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n\n\n  - deployment: CopyFiles_RunScripts\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-DEV-mPipeline\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/CopyFiles-RunScripts-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: true\n                CopySQLScriptExists: true\n                PreReleaseSQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: true\n                CopyTGVwMigrateExists: true\n                CopyConfigExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: true\n\n\n  - job: Manual_Intervention_Validation\n    dependsOn: CopyFiles_RunScripts\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services_Healthcheck\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-DEV-mPipeline\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/StartServices-Healthcheck-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: false\n                RestGBFPApplicationPoolNameExists: false\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-mPipeline\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-mPipeline\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: DEV_wMigrate\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/DEV_wMigrate.yml\n\n  jobs: \n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-DEV-wMigrate\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-DEV-wMigrate\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_DB_Backups\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-DEV-wMigrate\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/StopServices-DBBackup-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: true\n              RestGBFPApplicationPoolNameExists: true\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: false\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Stop_Services_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n\n\n  - deployment: CopyFiles_RunScripts\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-DEV-wMigrate\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/CopyFiles-RunScripts-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: true\n                CopySQLScriptExists: true\n                PreReleaseSQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: true\n                CopyTGVwMigrateExists: true\n                CopyConfigExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: true\n\n\n  - job: Manual_Intervention_Validation\n    dependsOn: CopyFiles_RunScripts\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services_Healthcheck\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-DEV-wMigrate\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/StartServices-Healthcheck-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: true\n                RestGBFPApplicationPoolNameExists: true\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-wMigrate\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-wMigrate\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: DEV_CSA\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/DEV_CSA.yml\n\n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-DEV-CSA\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-DEV-CSA\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_DB_Backups\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-DEV-CSA\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/StopServices-DBBackup-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: false\n              RestGBFPApplicationPoolNameExists: true\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: false\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Stop_Services_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles_RunScripts\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-DEV-CSA\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/CopyFiles-RunScripts-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: false\n                CopySQLScriptExists: true\n                PreReleaseSQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: false\n                CopyTGVwMigrateExists: false\n                CopyConfigExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: true\n\n  - job: Manual_Intervention_Validation\n    dependsOn: CopyFiles_RunScripts\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services_Healthcheck\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-DEV-CSA\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/StartServices-Healthcheck-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: false\n                RestGBFPApplicationPoolNameExists: true\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-CSA\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Send_Patching_Succeeded_Notification_To_Users\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-DEV-CSA\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: INTG\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/INTG.yml\n\n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-INTG\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-INTG\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_AppPools\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-INTG\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/WynsureGas-StopServices-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: true\n              RestGBFPApplicationPoolNameExists: true\n\n  - deployment: Run_DB_Backups\n    dependsOn: Stop_Services_AppPools\n    condition: and (in(dependencies.Stop_Services_AppPools.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunCoreDBBackups, true) }}) \n    environment: WynsureGas-INTG\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/WynsureGas-DBBackup-Template.yml@templates\n            parameters:\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: ${{ parameters.RunStagingDBBackups }}\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Run_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-INTG\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-CopyFiles-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: false\n                CopySQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: false\n                CopyTGVwMigrateExists: false\n                CopyConfigExists: true\n\n  - deployment: RunPreScripts\n    dependsOn: CopyFiles\n    condition: and (in(dependencies.CopyFiles.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunScripts, true) }})\n    environment: WynsureGas-INTG\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-RunScripts-Template.yml@templates\n              parameters:\n                PreReleaseSQLScriptExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: false\n\n  - deployment: RunRealTimeCoreDiffDBBackup\n    dependsOn: RunPreScripts\n    condition: and (in(dependencies.RunPreScripts.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }})\n    environment: WynsureGas-INTG\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGAS-StagingServer-Core-DBRestore-Template.yml@templates\n              parameters:\n                RealTimeCoreDiffDBBackupExists: true\n                StagingServerCoreDBDiffRestoreExists: false\n\n  - job: Manual_CoreDiffDBBackup_Validation\n    dependsOn: RunRealTimeCoreDiffDBBackup\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_CoreDiffDBBackup_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL RealTime Core Differential Db backup job has been started for $(DatabaseName) on server $(DatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor the job until completed.\n          \n          Once backup task is completed, we still need to monitor the backup SQL job $(SQLCoreBackupJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - job: Manual_StagingCoreDB_FullRestore_Validation\n    dependsOn: Manual_CoreDiffDBBackup_Validation\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_StagingCoreDB_FullRestore_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          Check if SQL Staging Server Core Db full restore job has completed for $(DatabaseName) on server $(StagingDatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor until completed, the full restore SQL job $(SQLFullCoreDBRestoreJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: RunStagingServerCoreDBDiffRestore\n    dependsOn: Manual_StagingCoreDB_FullRestore_Validation\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    environment: WynsureGas-INTG\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGAS-StagingServer-Core-DBRestore-Template.yml@templates\n              parameters:\n                RealTimeCoreDiffDBBackupExists: false\n                StagingServerCoreDBDiffRestoreExists: true\n\n  - job: Manual_StagingCoreDB_DiffRestore_Validation\n    dependsOn: RunStagingServerCoreDBDiffRestore\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_StagingCoreDB_DiffRestore_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL Staging Server Core Db differential restore job has been started for $(DatabaseName) on server $(StagingDatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor the job until completed.\n          \n          Once this restore task is completed, we still need to monitor the differential restore SQL job $(SQLDiffCoreDBRestoreJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: RunPostScripts\n    dependsOn: Manual_StagingCoreDB_DiffRestore_Validation\n    condition: and (and (in(dependencies.Manual_StagingCoreDB_DiffRestore_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunScripts, true) }}),\n                    ne(dependencies.RunPreScripts.result, \u0027Failed\u0027))\n    environment: WynsureGas-INTG\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-RunScripts-Template.yml@templates\n              parameters:\n                PreReleaseSQLScriptExists: false\n                EnvConfigDeploymentExists: false\n                ReleaseBatchScriptExists: false\n                PostReleaseSQLScriptExists: true\n\n  - job: Manual_Intervention_Validation\n    dependsOn: RunPostScripts\n    condition: or (eq(dependencies.RunPreScripts.result, \u0027Failed\u0027), eq(dependencies.RunPostScripts.result, \u0027Failed\u0027))\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.StopStartServicesAppPools, true) }})\n    environment: WynsureGas-INTG\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-StartServices-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: true\n                RestGBFPApplicationPoolNameExists: true\n\n  - deployment: Healthcheck\n    dependsOn: Start_Services\n    condition: and (in(dependencies.Start_Services.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-INTG\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-HealthCheck-Template.yml@templates\n              parameters:\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Healthcheck\n    condition: in(dependencies.HealthCheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-INTG\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Healthcheck\n    condition: in(dependencies.HealthCheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-INTG\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: SYST\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/SYST.yml\n\n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-SYST\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-SYST\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_AppPools\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-SYST\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/WynsureGas-StopServices-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: true\n              RestGBFPApplicationPoolNameExists: true\n\n  - deployment: Run_DB_Backups\n    dependsOn: Stop_Services_AppPools\n    condition: and (in(dependencies.Stop_Services_AppPools.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunCoreDBBackups, true) }})\n    environment: WynsureGas-SYST\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/WynsureGas-DBBackup-Template.yml@templates\n            parameters:\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: ${{ parameters.RunStagingDBBackups }}\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Run_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-SYST\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-CopyFiles-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: false\n                CopySQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: false\n                CopyTGVwMigrateExists: false\n                CopyConfigExists: true\n\n  - deployment: RunPreScripts\n    dependsOn: CopyFiles\n    condition: and (in(dependencies.CopyFiles.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunScripts, true) }})\n    environment: WynsureGas-SYST\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-RunScripts-Template.yml@templates\n              parameters:\n                PreReleaseSQLScriptExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: false\n\n  - deployment: RunRealTimeCoreDiffDBBackup\n    dependsOn: RunPreScripts\n    condition: and (in(dependencies.RunPreScripts.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }})\n    environment: WynsureGas-SYST\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGAS-StagingServer-Core-DBRestore-Template.yml@templates\n              parameters:\n                RealTimeCoreDiffDBBackupExists: true\n                StagingServerCoreDBDiffRestoreExists: false\n\n  - job: Manual_CoreDiffDBBackup_Validation\n    dependsOn: RunRealTimeCoreDiffDBBackup\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_CoreDiffDBBackup_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL RealTime Core Db backup job has been started for $(DatabaseName) on server $(DatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor the job until completed.\n          \n          Once backup task is completed, we still need to monitor the backup SQL job $(SQLCoreBackupJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - job: Manual_StagingCoreDB_FullRestore_Validation\n    dependsOn: Manual_CoreDiffDBBackup_Validation\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_StagingCoreDB_FullRestore_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          Check if SQL Staging Server Core Db full restore job has completed for $(DatabaseName) on server $(StagingDatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor until completed, the full restore SQL job $(SQLFullCoreDBRestoreJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: RunStagingServerCoreDBDiffRestore\n    dependsOn: Manual_StagingCoreDB_FullRestore_Validation\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    environment: WynsureGas-SYST\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGAS-StagingServer-Core-DBRestore-Template.yml@templates\n              parameters:\n                RealTimeCoreDiffDBBackupExists: false\n                StagingServerCoreDBDiffRestoreExists: true\n\n  - job: Manual_StagingCoreDB_DiffRestore_Validation\n    dependsOn: RunStagingServerCoreDBDiffRestore\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_StagingCoreDB_DiffRestore_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL Staging Server Core Db differential restore job has been started for $(DatabaseName) on server $(StagingDatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor the job until completed.\n          \n          Once this restore task is completed, we still need to monitor the differential restore SQL job $(SQLDiffCoreDBRestoreJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: RunPostScripts\n    dependsOn: Manual_StagingCoreDB_DiffRestore_Validation\n    condition: and (in(dependencies.Manual_StagingCoreDB_DiffRestore_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunScripts, true) }})\n    environment: WynsureGas-SYST\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-RunScripts-Template.yml@templates\n              parameters:\n                PreReleaseSQLScriptExists: false\n                EnvConfigDeploymentExists: false\n                ReleaseBatchScriptExists: false\n                PostReleaseSQLScriptExists: true\n\n  - job: Manual_Intervention_Validation\n    dependsOn: RunPostScripts\n    condition: or (eq(dependencies.RunPreScripts.result, \u0027Failed\u0027), eq(dependencies.RunPostScripts.result, \u0027Failed\u0027))\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.StopStartServicesAppPools, true) }})\n    environment: WynsureGas-SYST\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-StartServices-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: true\n                RestGBFPApplicationPoolNameExists: true\n\n  - deployment: Healthcheck\n    dependsOn: Start_Services\n    condition: and (in(dependencies.Start_Services.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-SYST\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-HealthCheck-Template.yml@templates\n              parameters:\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Healthcheck\n    condition: in(dependencies.HealthCheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-SYST\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Healthcheck\n    condition: in(dependencies.HealthCheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-SYST\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: SYST_Training\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/SYST_Training.yml\n\n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-SYST-Training\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-SYST-Training\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_DB_Backups\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-SYST-Training\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/StopServices-DBBackup-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: true\n              RestGBFPApplicationPoolNameExists: false\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: false\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Stop_Services_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles_RunScripts\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-SYST-Training\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/CopyFiles-RunScripts-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: false\n                CopySQLScriptExists: true\n                PreReleaseSQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: false\n                CopyTGVwMigrateExists: false\n                CopyConfigExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: true\n\n  - job: Manual_Intervention_Validation\n    dependsOn: CopyFiles_RunScripts\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services_Healthcheck\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-SYST-Training\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/StartServices-Healthcheck-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: true\n                RestGBFPApplicationPoolNameExists: false\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-SYST-Training\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-SYST-Training\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: PROD\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/PROD.yml\n\n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-PROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-PROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  # - deployment: Generate_CR_Information\n  #   environment: WynsureGas-PROD\n\n  #   strategy:\n  #     runOnce:\n  #       deploy:\n  #         steps:\n  #         - task: PowerShell@1\n  #           displayName: \u0027Generate CR Information\u0027\n  #           inputs:\n  #             scriptType: inlineScript\n  #             inlineScript: |\n  #               git clone https://$(GitHubPatUserName):$(GitHubPatPassword)@$(GitHubRepo)\n  #               pip install requests\n                    \n  #               $Env:ADO_USER=\"$(ADO_USER)\"\n  #               $Env:ADO_PAT=\"$(ADO_PAT)\"\n  #               $Env:ADO_BASE_URL=\"$(ADO_BASE_URL)\"\n                    \n  #               cd change-record\n  #               python change-record-yaml-pipeline.py -b $(Build.BuildId) -e $(System.StageName)\n  #             failOnStandardError: false\n\n  # - job: Manual_Intervention_Approve_CR\n  #   pool: server\n  #   displayName: Manual_Intervention_Approve_CR\n  #   timeoutInMinutes: 43200\n\n  #   steps:\n  #   - task: ManualValidation@0\n  #     inputs:\n  #       notifyUsers: |\n  #         [Enterprise]\\WynsureAflacGroup\n  #       instructions: |\n  #         Hello,\n\n  #         Please create the CR from previous task (Generate CR Info) and wait for CR approval.\n  #         Once CR is approved then, click the link above that says “View manual intervention” and then select the RESUME option in Azure DevOps.\n\n  #         Thanks,\n  #         Azure DevOps YAML Pipeline\n\n  #   dependsOn: Generate_CR_Information\n  #   condition: succeeded()\n\n  - deployment: Stop_Services_AppPools\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    # dependsOn: Manual_Intervention_Approve_CR\n    # condition: and (succeeded(),  ${{ eq(parameters.StopStartServicesAppPools, true) }})\n    environment: WynsureGas-PROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/WynsureGas-StopServices-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: true\n              RestGBFPApplicationPoolNameExists: true\n\n  - deployment: Run_DB_Backups\n    dependsOn: Stop_Services_AppPools\n    condition: and (in(dependencies.Stop_Services_AppPools.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunCoreDBBackups, true) }})\n    environment: WynsureGas-PROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/WynsureGas-DBBackup-Template.yml@templates\n            parameters:\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: ${{ parameters.RunStagingDBBackups }}\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Run_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-PROD\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-CopyFiles-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: false\n                CopySQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: false\n                CopyTGVwMigrateExists: false\n                CopyConfigExists: true\n\n  - deployment: RunPreScripts\n    dependsOn: CopyFiles\n    condition: and (in(dependencies.CopyFiles.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunScripts, true) }})\n    environment: WynsureGas-PROD\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-RunScripts-Template.yml@templates\n              parameters:\n                PreReleaseSQLScriptExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: false\n\n  - deployment: RunRealTimeCoreDiffDBBackup\n    dependsOn: RunPreScripts\n    condition: and (in(dependencies.RunPreScripts.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }})\n    environment: WynsureGas-PROD\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGAS-StagingServer-Core-DBRestore-Template.yml@templates\n              parameters:\n                RealTimeCoreDiffDBBackupExists: true\n                StagingServerCoreDBDiffRestoreExists: false\n\n  - job: Manual_CoreDiffDBBackup_Validation\n    dependsOn: RunRealTimeCoreDiffDBBackup\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_CoreDiffDBBackup_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL RealTime Core Differential Db backup job has been started for $(DatabaseName) on server $(DatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor the job until completed.\n          \n          Once backup task is completed, we still need to monitor the backup SQL job $(SQLCoreBackupJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - job: Manual_StagingCoreDB_FullRestore_Validation\n    dependsOn: Manual_CoreDiffDBBackup_Validation\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    pool: server\n    displayName: Manual_StagingCoreDB_FullRestore_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          Check if SQL Staging Server Core Db full restore job has completed for $(DatabaseName) on server $(StagingDatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor until completed, the full restore SQL job $(SQLFullCoreDBRestoreJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: RunStagingServerCoreDBDiffRestore\n    dependsOn: Manual_StagingCoreDB_FullRestore_Validation\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}\n    environment: WynsureGas-PROD\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGAS-StagingServer-Core-DBRestore-Template.yml@templates\n              parameters:\n                RealTimeCoreDiffDBBackupExists: false\n                StagingServerCoreDBDiffRestoreExists: true\n\n  - job: Manual_StagingCoreDB_DiffRestore_Validation\n    dependsOn: RunStagingServerCoreDBDiffRestore\n    condition: ${{ eq(parameters.RunStagingServerCoreDBRestores, true) }}  \n    pool: server\n    displayName: Manual_StagingCoreDB_DiffRestore_Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL Staging Server Core Db differential restore job has been started for $(DatabaseName) on server $(StagingDatabaseServer) in the $(System.StageName) environment. \n          \n          Please monitor the job until completed.\n          \n          Once this restore task is completed, we still need to monitor the differential restore SQL job $(SQLDiffCoreDBRestoreJob) using SQL Server Management Studio, then click the link above that says “Review manual intervention” and then select the RESUME option in Azure DevOps.\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: RunPostScripts\n    dependsOn: Manual_StagingCoreDB_DiffRestore_Validation\n    condition: and (in(dependencies.Manual_StagingCoreDB_DiffRestore_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunScripts, true) }})\n    environment: WynsureGas-PROD\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-RunScripts-Template.yml@templates\n              parameters:\n                PreReleaseSQLScriptExists: false\n                EnvConfigDeploymentExists: false\n                ReleaseBatchScriptExists: false\n                PostReleaseSQLScriptExists: true\n\n  - job: Manual_Intervention_Validation\n    dependsOn: RunPostScripts\n    condition: or (eq(dependencies.RunPreScripts.result, \u0027Failed\u0027), eq(dependencies.RunPostScripts.result, \u0027Failed\u0027))\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.StopStartServicesAppPools, true) }})\n    environment: WynsureGas-PROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-StartServices-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: true\n                RestGBFPApplicationPoolNameExists: true\n\n  - deployment: Healthcheck\n    dependsOn: Start_Services\n    condition: and (in(dependencies.Start_Services.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027),  ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-PROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/WynsureGas-HealthCheck-Template.yml@templates\n              parameters:\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Healthcheck\n    condition: in(dependencies.HealthCheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Healthcheck\n    condition: in(dependencies.HealthCheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: PROD_Copy\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/PROD_Copy.yml\n\n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-PROD-Copy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-PROD-Copy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_DB_Backups\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-PROD-Copy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/StopServices-DBBackup-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: false\n              RestGBFPApplicationPoolNameExists: false\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: false\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Stop_Services_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles_RunScripts\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-PROD-Copy\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/CopyFiles-RunScripts-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: false\n                CopySQLScriptExists: true\n                PreReleaseSQLScriptExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyCPPDLLExists: true\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: false\n                CopyTGVwMigrateExists: false\n                CopyConfigExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: true\n\n  - deployment: RestoreProfiles\n    dependsOn: CopyFiles_RunScripts\n    condition:  ${{ eq(parameters.RunCopyFiles, true) }}\n    environment: WynsureGas-PROD-Copy\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - task: WindowsMachineFileCopy@2\n            displayName: \u0027Copy Profile Configs\u0027\n            inputs:\n              SourcePath: \u0027$(ProfileConfigBackupPath)\u0027\n              MachineNames: \u0027$(BatchServers)\u0027\n              AdminUserName: \u0027$(DeployUserID)\u0027\n              AdminPassword: \u0027$(DeployUserPassword)\u0027\n              TargetPath: \u0027$(ConfigPath)\u0027\n              CleanTargetBeforeCopy: true\n\n          - task: PowerShellOnTargetMachines@2\n            displayName: \u0027PowerShell - ImportProfileBatchScript\u0027\n            inputs:\n              EnvironmentName: \u0027$(BatchServers)\u0027\n              AdminUserName: \u0027$(DeployUserID)\u0027\n              AdminPassword: \u0027$(DeployUserPassword)\u0027\n              Protocol: \u0027Http\u0027\n              ScriptPath: \u0027$(BatScriptPath)\\$(ImportProfileScriptName)\u0027\n              ScriptArguments: \u0027-EnvironmentName $(System.StageName)\u0027\n \n  - job: Manual_Intervention_Validation\n    dependsOn: RestoreProfiles\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services_Healthcheck\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-PROD-Copy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/StartServices-Healthcheck-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: false\n                RestGBFPApplicationPoolNameExists: false\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PROD-Copy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PROD-Copy\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: PROD_CopyInterpreted\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/PROD_CopyInterpreted.yml\n\n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-PROD-CopyInterpreted\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-PROD-CopyInterpreted\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_DB_Backups\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-PROD-CopyInterpreted\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/StopServices-DBBackup-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: false\n              RestGBFPApplicationPoolNameExists: false\n              CoreServerDBBackupExists: false\n              StagingServerDBBackupExists: false\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Stop_Services_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles_RunScripts\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-PROD-CopyInterpreted\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/CopyFiles-RunScripts-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: false\n                CopySQLScriptExists: true\n                PreReleaseSQLScriptExists: false\n                CopyCPPDLLExists: false\n                CopyCPPDLLInterpretedExists: true\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: false\n                CopyTGVwMigrateExists: false\n                CopyConfigExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: false\n                PostReleaseSQLScriptExists: false\n\n  - job: Manual_Intervention_Validation\n    dependsOn: CopyFiles_RunScripts\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services_Healthcheck\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-PROD-CopyInterpreted\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/StartServices-Healthcheck-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: false\n                RestGBFPApplicationPoolNameExists: false\n                HealthCheckExists: true\n                DeploymentType: Interpreted\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PROD-CopyInterpreted\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PROD-CopyInterpreted\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: PROD_CopyDebug\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/PROD_CopyDebug.yml\n\n  jobs :\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-PROD-CopyDebug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-PROD-CopyDebug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_DB_Backups\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-PROD-CopyDebug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/StopServices-DBBackup-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: false\n              RestGBFPApplicationPoolNameExists: false\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: false\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Stop_Services_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles_RunScripts\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-PROD-CopyDebug\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/CopyFiles-RunScripts-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: false\n                CopySQLScriptExists: true\n                PreReleaseSQLScriptExists: true\n                CopyCPPDLLExists: false\n                CopyCPPDLLInterpretedExists: true\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: false\n                CopyTGVwMigrateExists: false\n                CopyConfigExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: true\n\n  - job: Manual_Intervention_Validation\n    dependsOn: CopyFiles_RunScripts\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services_Healthcheck\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-PROD-CopyDebug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/StartServices-Healthcheck-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: false\n                RestGBFPApplicationPoolNameExists: false\n                HealthCheckExists: true\n                DeploymentType: Interpreted\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PROD-CopyDebug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PROD-CopyDebug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: PrePROD\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/PrePROD.yml\n\n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-PrePROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-PrePROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_DB_Backups\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-PrePROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/StopServices-DBBackup-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: false\n              RestGBFPApplicationPoolNameExists: false\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: false\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Stop_Services_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles_RunScripts\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-PrePROD\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/CopyFiles-RunScripts-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: true\n                CopySQLScriptExists: true\n                PreReleaseSQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: true\n                CopyTGVwMigrateExists: true\n                CopyConfigExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: true\n\n  - job: Manual_Intervention_Validation\n    dependsOn: CopyFiles_RunScripts\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services_Healthcheck\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-PrePROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/StartServices-Healthcheck-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: false\n                RestGBFPApplicationPoolNameExists: false\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PrePROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PrePROD\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume\n\n- stage: PrePROD_Debug\n  pool: AflacReleasePool\n  dependsOn: EntryPointStage\n\n  variables:\n  - template:  vars/PrePROD_Debug.yml\n\n  jobs:\n  - deployment: Send_Patching_Notification_To_Users\n    environment: WynsureGas-PrePROD-Debug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PrePatch\n              WaitTime: 15\n\n  - job: Delay_For_Start\n    pool: Server\n    steps:\n    - task: Delay@1\n      displayName: \u002715 Minutes Delay\u0027\n      inputs:\n        delayForMinutes: 15\n\n  - deployment: Send_Ignore_Email_ITSA\n    dependsOn: Delay_For_Start\n    environment: WynsureGas-PrePROD-Debug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Ignore\n\n  - deployment: Stop_Services_DB_Backups\n    condition: ${{ eq(parameters.StopStartServicesAppPools, true) }}\n    environment: WynsureGas-PrePROD-Debug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - template: pipelines/StopServices-DBBackup-Template.yml@templates\n            parameters:\n              AppServiceNameExists: true\n              WebUIApplicationPoolNameExists: true\n              APIApplicationPoolNameExists: true\n              RestEDAApplicationPoolNameExists: false\n              RestGBFPApplicationPoolNameExists: false\n              CoreServerDBBackupExists: ${{ parameters.RunCoreDBBackups }}\n              StagingServerDBBackupExists: false\n\n  - job: Manual_Intervention_DBBackup\n    dependsOn: Stop_Services_DB_Backups\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention DBBackup\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          SQL or instance backup jobs have failed for $(DatabaseName), $(StagingDatabaseName) and/or $(AppInstanceRootPath) in the $(System.StageName) environment. \n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n          \n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: CopyFiles_RunScripts\n    dependsOn: Manual_Intervention_DBBackup\n    condition: and (in(dependencies.Manual_Intervention_DBBackup.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunCopyFiles, true) }})\n    environment: WynsureGas-PrePROD-Debug\n    workspace:\n      clean: all\n    timeoutInMinutes: 0\n          \n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/CopyFiles-RunScripts-Template.yml@templates\n              parameters:\n                ArtifactoryGenericDownloadExists: true\n                ExtractFilesExists: true\n                PSCheckPackageFoldersExists: true\n                CopyBatchScriptsExists: true\n                CopyEnvironmentConfigExists: true\n                CopyManifestFilesExists: true\n                CopyManifestFileswMigrateExists: true\n                CopySQLScriptExists: true\n                PreReleaseSQLScriptExists: true\n                CopyCPPDLLExists: true\n                CopyCPPDLLInterpretedExists: false\n                CopyTGVExists: true\n                CopyCPPDLLwMigrateExists: true\n                CopyTGVwMigrateExists: true\n                CopyConfigExists: true\n                EnvConfigDeploymentExists: true\n                ReleaseBatchScriptExists: true\n                PostReleaseSQLScriptExists: true\n\n  - job: Manual_Intervention_Validation\n    dependsOn: CopyFiles_RunScripts\n    condition: failed()\n    pool: server\n    displayName: Manual Intervention Validation\n    timeoutInMinutes: 43200\n\n    steps:\n    - task: ManualValidation@0\n      inputs:\n        notifyUsers: |\n          [Enterprise]\\WynsureAflacGroup\n        instructions: |\n          Hello Team,\n          \n          One or more tasks have failed on $(System.StageName).\n          \n          Please review failing task(s) logs and resolve before deciding to \"Resume\" or \"Reject\".\n\n          Thanks,\n          Azure DevOps YAML Pipeline\n\n  - deployment: Start_Services_Healthcheck\n    dependsOn: Manual_Intervention_Validation\n    condition: and (in(dependencies.Manual_Intervention_Validation.result, \u0027Succeeded\u0027, \u0027SucceededWithIssues\u0027, \u0027Skipped\u0027), ${{ eq(parameters.RunHealthCheck, true) }})\n    environment: WynsureGas-PrePROD-Debug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - template: pipelines/StartServices-Healthcheck-Template.yml@templates\n              parameters:\n                AppServiceNameExists: true\n                WebUIApplicationPoolNameExists: true\n                APIApplicationPoolNameExists: true\n                RestEDAApplicationPoolNameExists: false\n                RestGBFPApplicationPoolNameExists: false\n                HealthCheckExists: true\n                DeploymentType: Compiled\n\n  - deployment: Send_Patching_Succeeded_Notification_To_Users\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PrePROD-Debug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/Templates/WynsureGAS-SendEmail-Users-Template.yml@templates\n            parameters:\n              EmailType: PostPatch\n              WaitTime: 15\n\n  - deployment: Send_Resume_Email_ITSA\n    dependsOn: Start_Services_Healthcheck\n    condition: in(dependencies.Start_Services_Healthcheck.result, \u0027Succeeded\u0027)\n    environment: WynsureGas-PrePROD-Debug\n\n    strategy:\n      runOnce:\n        deploy:\n          steps:       \n          - template: pipelines/WynsureGAS-SendEmail-ITSA-Template.yml@templates\n            parameters:\n              EmailType: Resume"}